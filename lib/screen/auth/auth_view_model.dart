import 'dart:convert';import 'package:flutter/material.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../api/api_response.dart';import '../../api/repositories/user_repository.dart';import '../../config/preference.config.dart';import '../../model/request/login_request.dart';import '../../model/response/login_reponse.dart';import '../../model/response/user_response.dart';class AuthViewModel with ChangeNotifier {  final SharedPreferences localStorage = PreferenceUtils.instance;  bool _loggedIn = false;  bool get loggedIn => _loggedIn;  String _username = "";  String _password = "";  String get username => _username;  String get password => _password;  void setUsername(String user_name) {    _username = user_name;    notifyListeners();  }  void setPassword(String pass_word) {    _password = pass_word;    notifyListeners();  }  ApiResponse _loginApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get loginApiResponse => _loginApiResponse;  Future<void> login() async {    _loginApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      dynamic data = loginRequestToJson(LoginRequest(        email: _username,        password: _password,      ));      LoginResponse res = await UserRepository().login(data);      if (res.success == true) {        // _user = res.user!;      print("RESPONSE :: " + res.toString());        localStorage.setString("user", jsonEncode(_user));        localStorage.setString("token", res.access.toString());        localStorage.setString("refresh", res.refresh.toString());        // localStorage.setString("type", res.user!.type.toString());        localStorage.setString("username", _username);        localStorage.setString("password", _password);        _loginApiResponse = ApiResponse.completed(res.success.toString());      } else {        _loginApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR :: " + e.toString());      _loginApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }  ApiResponse _userApiResponse = ApiResponse.initial("Empty Data");  ApiResponse get userApiResponse => _userApiResponse;  UserResponse _user = UserResponse();  UserResponse get user => _user;  Future<void> fetchUser() async {    _userApiResponse = ApiResponse.initial("Loading");    notifyListeners();    try {      UserResponse res = await UserRepository().getUser();      if (res.success == true) {        _user = res;        localStorage.setString("user", jsonEncode(_user));        localStorage.setString("isAdmin", res.isAdmin.toString());        localStorage.setString("isStaff", res.isStaff.toString());        localStorage.setString("status", res.status.toString());        localStorage.setString("isSuperuser", res.isSuperuser.toString());        _userApiResponse = ApiResponse.completed(res.success.toString());      } else {        _userApiResponse = ApiResponse.error(res.success.toString());      }    } catch (e) {      print("VM CATCH ERR :: " + e.toString());      _userApiResponse = ApiResponse.error(e.toString());    }    notifyListeners();  }}