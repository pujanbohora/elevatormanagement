// Flutter imports:import 'package:flutter/material.dart';import '../../../../constants/app_color.dart';import '../../../../constants/validator.dart';import '../../../widget/custom_app_bar.dart';import '../../../widget/custom_button_widget.dart';import '../../../widget/custom_text_field.dart';import '../../../widget/customer_form_field_widget.dart';class CreateUserScreen extends StatefulWidget {  const CreateUserScreen({Key? key}) : super(key: key);  @override  State<CreateUserScreen> createState() => _CreateUserScreenState();}class _CreateUserScreenState extends State<CreateUserScreen> {  final _formKey = GlobalKey<FormState>();  String? email;  String? lastName;  FocusNode emailFocusNode = FocusNode();  bool canClearConfirmPasswordError = false;  final TextEditingController passwordController = TextEditingController();  final TextEditingController confirmPasswordController =  TextEditingController();  final TextEditingController emailController = TextEditingController();  final TextEditingController firstNameController = TextEditingController();  final TextEditingController lastNameController = TextEditingController();  bool isLoading = false;  var selectedValue = "";  @override  Widget build(BuildContext context) {    Size size = MediaQuery.of(context).size;    return Scaffold(      // backgroundColor: const Color(0xffE4F2F7),      appBar: appBar(          noBackButton: true,          navTitle: 'Create User',          appBarBackgroupColor: white,          textColor: black,          iconColor: lightTabBlue,          ),      body: SafeArea(        child:        SingleChildScrollView(          child: Column(            children: [              SizedBox(                height: size.height * 0.02,              ),              Form(                autovalidateMode: AutovalidateMode.disabled,                key: _formKey,                child: Column(                  mainAxisAlignment: MainAxisAlignment.center,                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Padding(                      padding:                      const EdgeInsets.symmetric(horizontal: 20),                      child: RichText(                        text: const TextSpan(                          text: 'Name',                          style: TextStyle(                              fontSize: 16,                              color: Colors.black,                              fontWeight: FontWeight.bold),                          children: <TextSpan>[                            TextSpan(                              text: '*',                              style: TextStyle(                                color: Colors.red,                              ),                            ),                          ],                        ),                      ),                    ),                    SizedBox(height: 8,),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 18),                      child: Row(                        children: [                          Expanded(                            child: InputField(                              textEditingController: firstNameController,                              // focusNode: emailFocusNode,                              validator: (value){},                              textInputAction: TextInputAction.next,                              getInputFieldValue: (String value) {                                setState(() {                                  email = value;                                });                              },                              hintText: 'First Name',                            ),                          ),                          const SizedBox(width: 5,),                          Expanded(                            child: InputField(                              textEditingController: lastNameController,                              // focusNode: emailFocusNode,                              validator: (value){},                              textInputAction: TextInputAction.next,                              getInputFieldValue: (String value) {                                setState(() {                                  email = value;                                });                              },                              hintText: 'Last Name',                            ),                          ),                        ],                      ),                    ),                    SizedBox(height: size.height * 0.02),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: RichText(                        text: const TextSpan(                          text: 'Email',                          style: TextStyle(                              fontSize: 16,                              color: Colors.black,                              fontWeight: FontWeight.bold),                          children: <TextSpan>[                            TextSpan(                              text: '*',                              style: TextStyle(                                color: Colors.red,                              ),                            ),                          ],                        ),                      ),                    ),                    SizedBox(height: size.height * 0.01),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: InputField(                        textEditingController: emailController,                        focusNode: emailFocusNode,                        validator: Validators.validateEmail,                        textInputAction: TextInputAction.next,                        getInputFieldValue: (String value) {                          setState(() {                            email = value;                          });                        },                        hintText: 'Enter email',                      ),                    ),                    SizedBox(height: size.height * 0.02),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: RichText(                        text: const TextSpan(                          text: 'Password',                          style: TextStyle(                              fontSize: 16,                              color: Colors.black,                              fontWeight: FontWeight.bold),                          children: <TextSpan>[                            TextSpan(                              text: '*',                              style: TextStyle(                                color: Colors.red,                              ),                            ),                          ],                        ),                      ),                    ),                    CustomFormField(                      fieldName: '',                      textEditingController: passwordController,                      isObscure: true,                      hint: 'Password',                      validator: (value) =>                          Validators.validatePassword(value, false),                    ),                    SizedBox(height: size.height * 0.02),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: RichText(                        text: const TextSpan(                          text: 'Confirm Password',                          style: TextStyle(                              fontSize: 16,                              color: Colors.black,                              fontWeight: FontWeight.bold),                          children: <TextSpan>[                            TextSpan(                              text: '*',                              style: TextStyle(                                color: Colors.red,                              ),                            ),                          ],                        ),                      ),                    ),                    CustomFormField(                      fieldName: '',                      textEditingController: confirmPasswordController,                      isObscure: true,                      hint: 'Confirm Password',                      validator: (value) => Validators.validateConfirmPassword(                          passwordController.text,                          value,                          canClearConfirmPasswordError),                    ),                    SizedBox(height: size.height * 0.03),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: RichText(                        text: const TextSpan(                          text: 'User Role',                          style: TextStyle(                              fontSize: 16,                              color: Colors.black,                              fontWeight: FontWeight.bold),                          children: <TextSpan>[                            TextSpan(                              text: '*',                              style: TextStyle(                                color: Colors.red,                              ),                            ),                          ],                        ),                      ),                    ),                    Padding(                      padding: const EdgeInsets.symmetric(horizontal: 20),                      child: DropdownButton<String>(                        icon: Icon(Icons.arrow_downward),                        iconSize: 24,                        elevation: 16,                        style: TextStyle(color: Theme.of(context).accentColor),                        underline: Container(                          height: 2,                          color: Colors.deepPurpleAccent,                        ),                        onChanged: (String? newValue) {                          selectedValue = newValue!;                        },                        items: <String>[                          'Manager',                          'Technician',                          'Customer',                        ].map<DropdownMenuItem<String>>((String selectedValue) {                          return DropdownMenuItem<String>(                            value: selectedValue,                            child: Text(selectedValue.toString()),                          );                        }).toList(),                      ),                    ),                    SizedBox(height: size.height * 0.03),                    Padding(                      padding: const EdgeInsets.symmetric(                        horizontal: 20.0,                      ),                      child: ActionButton(                          background: lightTabBlue,                          width: size.width,                          height: 55,                          isLoading: isLoading,                          // state is SignupLoadingState ? true : false,                          borderRadius: 10,                          text: Text(                            "Create User",                            style: Theme.of(context)                                .textTheme                                .bodyText1!                                .copyWith(                                color: Colors.white,                                fontSize: 14 ,                                fontWeight: FontWeight.bold),                          ),                          onPressed: () {                            if (_formKey.currentState!.validate()) {}                          }),                    ),                    SizedBox(                      height: size.height * 0.03,                    ),                  ],                ),              ),            ],          ),        ),        // ),      ),    );  }}