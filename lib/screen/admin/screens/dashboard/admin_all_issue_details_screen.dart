import 'dart:convert';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:intl/intl.dart';import 'package:loader_overlay/loader_overlay.dart';import 'package:multi_select_flutter/dialog/multi_select_dialog_field.dart';import 'package:multi_select_flutter/util/multi_select_item.dart';import 'package:multi_select_flutter/util/multi_select_list_type.dart';import 'package:provider/provider.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../../api/repositories/admin/user_repo.dart';import '../../../../api/repositories/customer_issue_repo.dart';import '../../../../constants/app_color.dart';import '../../../../constants/font_size.dart';import '../../../../constants/font_weight.dart';import '../../../../constants/route_name.dart';import '../../../../constants/text_style.dart';import '../../../../model/response/user_response.dart';import '../../../../view_model/common_view_model.dart';import '../../../widget/custom_app_bar.dart';import '../../../widget/snackbar.dart';class AdminAllIssueDetailsScreen extends StatefulWidget {  final dynamic args;  const AdminAllIssueDetailsScreen({    Key? key,    this.args,  }) : super(key: key);  @override  State<AdminAllIssueDetailsScreen> createState() =>      _AdminAllIssueDetailsScreenState();}class _AdminAllIssueDetailsScreenState    extends State<AdminAllIssueDetailsScreen> {  final TextEditingController _controller = TextEditingController();  late Future<List<dynamic>> userList;  bool _keyboardVisible = false;  List<String>? selectedTechnician;  @override  void initState() {    userList = AdminUserRepository().getStaffList();    super.initState();  }  bool isloading = false;  @override  Widget build(BuildContext context) {    if (isloading == true) {      context.loaderOverlay.show();    } else {      context.loaderOverlay.hide();    }    _keyboardVisible = MediaQuery.of(context).viewInsets.bottom != 0;    return Consumer<CommonViewModel>(        builder: (context, common, child) {      return Scaffold(        appBar: appBar(          appBarBackgroupColor: white,          noBackButton: true,          navTitle: "Issues",          settingIcon: Padding(            padding: const EdgeInsets.only(right: 30),            child: InkWell(                onTap: () {                  Navigator.pushNamed(context, routeQRGenerator,                      arguments: widget.args["id"]);                },                child: const Icon(Icons.qr_code)),          ),        ),        body: Scaffold(          body: FutureBuilder<List<dynamic>>(              future: userList,              builder: (context, snapShot) {                return ListView(                  physics: const BouncingScrollPhysics(),                  scrollDirection: Axis.vertical,                  shrinkWrap: true,                  children: [                    Padding(                      padding:                          const EdgeInsets.symmetric(horizontal: 20),                      child: Row(                        mainAxisAlignment: MainAxisAlignment.end,                        children: [                          snapShot.hasData                              ? InkWell(                                  onTap: () {                                    showDialog(                                      context: context,                                      builder:                                          (BuildContext context) {                                        return StatefulBuilder(                                            builder:                                                (context, setState) {                                          return AlertDialog(                                            title: const Text(                                                "Assign to"),                                            content: SizedBox(                                              height: 270,                                              child: Column(                                                mainAxisAlignment:                                                    MainAxisAlignment                                                        .start,                                                crossAxisAlignment:                                                    CrossAxisAlignment                                                        .start,                                                children: [                                                  MultiSelectDialogField(                                                    items: snapShot                                                        .data!                                                        .map<                                                            MultiSelectItem<                                                                String>>((e) =>                                                            MultiSelectItem(                                                                e["id"]                                                                    .toString(),                                                                e["display_name"]                                                                    .toString()))                                                        .toList(),                                                    listType:                                                        MultiSelectListType                                                            .CHIP,                                                    autovalidateMode:                                                        AutovalidateMode                                                            .always,                                                    onConfirm:                                                        (List<String>                                                            values) {                                                      setState(() {                                                        selectedTechnician =                                                            values;                                                      });                                                    },                                                  ),                                                  const SizedBox(                                                    height: 10,                                                  ),                                                  Row(                                                    mainAxisAlignment:                                                        MainAxisAlignment                                                            .center,                                                    crossAxisAlignment:                                                        CrossAxisAlignment                                                            .center,                                                    children: <                                                        Widget>[                                                      Padding(                                                        padding: const EdgeInsets                                                                .only(                                                            top:                                                                15.0),                                                        child:                                                            SizedBox(                                                          height: 35,                                                          width: 80,                                                          child:                                                              ElevatedButton(                                                            style: ButtonStyle(                                                                backgroundColor: MaterialStateProperty.all(lightTabBlue),                                                                shape: MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(                                                                  borderRadius:                                                                      BorderRadius.circular(4.0),                                                                ))),                                                            onPressed:                                                                () async {                                                              try {                                                                if (selectedTechnician ==                                                                    null) {                                                                  Fluttertoast.showToast(msg: 'Select Technician');                                                                } else {                                                                  setState(() {                                                                    isloading = true;                                                                  });                                                                  String                                                                      request =                                                                      jsonEncode({                                                                    "assigned_to":                                                                      selectedTechnician                                                                    ,                                                                  });                                                                  bool                                                                      res =                                                                      await AdminUserRepository().assignTechnician(request, widget.args["id"].toString());                                                                  if (res ==                                                                      true) {                                                                    setState(() {                                                                      isloading = true;                                                                    });                                                                    Navigator.of(context).pop();                                                                    snackThis(context: context, content: const Text("Technician assigned successfully"), color: Colors.green, duration: 1, behavior: SnackBarBehavior.floating);                                                                    setState(() {                                                                      isloading = false;                                                                    });                                                                  } else {                                                                    setState(() {                                                                      isloading = true;                                                                    });                                                                    Navigator.of(context).pop();                                                                    snackThis(context: context, content: Text("Technician assigned failed"), color: Colors.red, duration: 1, behavior: SnackBarBehavior.floating);                                                                    setState(() {                                                                      isloading = false;                                                                    });                                                                  }                                                                }                                                              } catch (e) {                                                                setState(                                                                    () {                                                                  isloading =                                                                      true;                                                                });                                                                Navigator.of(context)                                                                    .pop();                                                                snackThis(                                                                    context: context,                                                                    content: Text(e.toString()),                                                                    color: Colors.red,                                                                    duration: 1,                                                                    behavior: SnackBarBehavior.floating);                                                                setState(                                                                    () {                                                                  isloading =                                                                      false;                                                                });                                                              }                                                            },                                                            child: const Text(                                                                "Assign",                                                                style: TextStyle(                                                                    fontSize: 14,                                                                    color: white)),                                                          ),                                                        ),                                                      ),                                                      const SizedBox(                                                        width: 15,                                                      ),                                                      Padding(                                                        padding: const EdgeInsets                                                                .only(                                                            top:                                                                15.0),                                                        child:                                                            SizedBox(                                                          height: 35,                                                          width: 90,                                                          child:                                                              ElevatedButton(                                                            onPressed:                                                                () {                                                              Navigator.pop(context);                                                            },                                                            style: ButtonStyle(                                                                backgroundColor: MaterialStateProperty.all(Colors.amber),                                                                shape: MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(                                                                  borderRadius:                                                                      BorderRadius.circular(4.0),                                                                ))),                                                            child:                                                                const Text(                                                              "Cancel",                                                              style: TextStyle(                                                                  fontSize:                                                                      14,                                                                  color:                                                                      black),                                                            ),                                                          ),                                                        ),                                                      )                                                    ],                                                  ),                                                ],                                              ),                                            ),                                          );                                        });                                      },                                    );                                  },                                  child: widget.args["status"]                                              .toString() ==                                          "OPEN"                                      ? Container(                                          padding: const EdgeInsets                                                  .symmetric(                                              horizontal: 10,                                              vertical: 7),                                          decoration: BoxDecoration(                                            color: lightTabBlue,                                            borderRadius:                                                BorderRadius.circular(                                                    4),                                          ),                                          child: Text(                                            "Assign task",                                            style: TextStyle(                                                color: white),                                          ))                                      : Container(),                                )                              : InkWell(                                  onTap: () {                                    showDialog(                                      context: context,                                      builder:                                          (BuildContext context) {                                        return StatefulBuilder(                                            builder:                                                (context, setState) {                                          return const AlertDialog(                                            title: Text("Assign to"),                                            content: Text(                                                "Something went wrong"),                                          );                                        });                                      },                                    );                                  },                                  child: widget.args["status"]                                              .toString() ==                                          "OPEN"                                      ? Container(                                          padding: const EdgeInsets                                                  .symmetric(                                              horizontal: 10,                                              vertical: 7),                                          decoration: BoxDecoration(                                            color: lightTabBlue,                                            borderRadius:                                                BorderRadius.circular(                                                    4),                                          ),                                          child: Text(                                            "Assign task",                                            style: TextStyle(                                                color: white),                                          ))                                      : Container(),                                ),                        ],                      ),                    ),                    Padding(                      padding: const EdgeInsets.symmetric(                          horizontal: 20, vertical: 5),                      child: Padding(                        padding: const EdgeInsets.symmetric(                            horizontal: 10, vertical: 10),                        child: Column(                          crossAxisAlignment:                              CrossAxisAlignment.start,                          children: [                            Padding(                              padding: const EdgeInsets.symmetric(                                  horizontal: 10, vertical: 5),                              child: Text(                                widget.args["title"].toString(),                                style: const TextStyle(                                    fontWeight: kW8,                                    fontSize: font_15),                              ),                            ),                            Padding(                              padding: const EdgeInsets.symmetric(                                  horizontal: 10, vertical: 5),                              child: Row(                                children: [                                  const Text("Status: ",                                      style:                                          TextStyle(fontWeight: kW6)),                                  Container(                                      padding:                                          const EdgeInsets.all(5),                                      color: black,                                      child: Text(                                        widget.args["status"]                                            .toString(),                                        style: const TextStyle(                                            color: white),                                      )),                                ],                              ),                            ),                            Padding(                              padding: const EdgeInsets.symmetric(                                  horizontal: 10, vertical: 5),                              child: Text(                                  "Issued Date: ${DateFormat.yMMMEd().format(DateTime.parse(widget.args["ordered_date"]))}",                                  style: const TextStyle(                                      fontWeight: kW6)),                            ),                            widget.args["completed_date"] != null                                ? Padding(                                    padding:                                        const EdgeInsets.symmetric(                                            horizontal: 10,                                            vertical: 5),                                    child: Text(                                      "Completed on: ${DateFormat.yMMMEd().format(DateTime.parse(widget.args["completed_date"]))}",                                      style: TextStyle(                                          color: solidRed,                                          fontWeight: kW5),                                    ),                                  )                                : Container(),                            Padding(                              padding: const EdgeInsets.symmetric(                                  horizontal: 10, vertical: 5),                              child: Container(                                padding: const EdgeInsets.symmetric(                                    horizontal: 10, vertical: 5),                                decoration: BoxDecoration(                                    color: const Color(0xfffd4edda),                                    borderRadius:                                        BorderRadius.circular(4)),                                child: Text(                                  widget.args["description"]                                      .toString(),                                ),                              ),                            ),                            const SizedBox(                              height: 10,                            ),                          ],                        ),                      ),                    ),                    Container(                      color: grey_200,                      padding:                          const EdgeInsets.symmetric(horizontal: 15),                      child: IgnorePointer(                          ignoring: true,                          child: TextField(                            decoration: InputDecoration(                              border: InputBorder.none,                              hintText: widget.args["comments"] !=                                      null                                  ? "${widget.args["comments"].length} Comments"                                  : "No comments yet",                              hintStyle: g6S14w4,                            ),                          )),                    ),                    ListView.builder(                        physics: const BouncingScrollPhysics(),                        shrinkWrap: true,                        itemCount: widget.args["comments"].length,                        itemBuilder: (context, innerIndex) {                          return Container(                            padding: const EdgeInsets.symmetric(                                vertical: 20, horizontal: 20),                            decoration: const BoxDecoration(                              color: white,                              border: Border(                                bottom: BorderSide(                                  color: grey_200,                                  width: 1,                                ),                              ),                            ),                            child: Column(                              crossAxisAlignment:                                  CrossAxisAlignment.start,                              children: [                                Row(                                  children: [                                    Container(                                      height: 30,                                      width: 30,                                      decoration: BoxDecoration(                                        borderRadius:                                            BorderRadius.circular(3),                                        color: Colors.orange,                                      ),                                      child: Center(                                          child: Text(                                        widget.args["comments"][innerIndex]["created_by"]["full_name"] == null ||                                                widget.args["comments"]                                                                [innerIndex]                                                            ["created_by"][                                                        "full_name"] ==                                                    ""                                            ? widget.args["comments"]                                                    [innerIndex]                                                    ["created_by"]                                                    ["email"]                                                .toString()                                                .substring(0, 1)                                                .toUpperCase()                                            : widget.args["comments"]                                                    [innerIndex]                                                    ["created_by"]                                                    ["full_name"]                                                .toString()                                                .substring(0, 1),                                        style: wS12W4.copyWith(                                            fontWeight: kW6,                                            fontSize: font_16),                                      )),                                    ),                                    const SizedBox(                                      width: 15,                                    ),                                    Column(                                      crossAxisAlignment:                                          CrossAxisAlignment.start,                                      children: [                                        RichText(                                          text: TextSpan(                                            text: widget                                                .args["comments"]                                                    [innerIndex]                                                    ["created_by"]                                                    ["full_name"]                                                .toString(),                                            style: bS12W4.copyWith(                                                fontWeight: kW5,                                                fontSize: font_14,                                                overflow: TextOverflow                                                    .ellipsis),                                            children: <TextSpan>[                                              TextSpan(                                                  text: widget.args["comments"][innerIndex]                                                                  [                                                                  "created_by"]                                                              [                                                              "is_staff"] ==                                                          true                                                      ? "  (Technician)"                                                      : "",                                                  style: bS12W4.copyWith(                                                      fontWeight: kW7,                                                      fontSize:                                                          font_14,                                                      color:                                                          Colors.red,                                                      overflow:                                                          TextOverflow                                                              .ellipsis)),                                            ],                                          ),                                        ),                                        const SizedBox(                                          height: 3,                                        ),                                        Text(                                            DateFormat.yMMMEd().format(                                                DateTime.parse(widget                                                                .args[                                                            "comments"]                                                        [innerIndex]                                                    ["created_at"])),                                            maxLines: 1,                                            style: bS12W4.copyWith(                                                fontSize: font_12,                                                overflow: TextOverflow                                                    .ellipsis)),                                      ],                                    ),                                  ],                                ),                                Padding(                                  padding: const EdgeInsets.only(                                      left: 45, right: 20, top: 10),                                  child: Text(                                    widget.args["comments"]                                            [innerIndex]["body"]                                        .toString(),                                    style: const TextStyle(                                        fontSize: font_15),                                  ),                                ),                              ],                            ),                          );                        })                  ],                );              }),          // bottomNavigationBar: SizedBox(          //     height: _keyboardVisible ? 85 : 70,          //     child: Column(          //       children: [          //         Container(          //             decoration: const BoxDecoration(          //               border: Border(          //                 top: BorderSide(          //                   color: grey_200,          //                   width: 1,          //                 ),          //               ),          //             ),          //             child: TextField(          //               controller: _controller,          //               autofocus: true,          //               decoration: const InputDecoration(          //                 border: InputBorder.none,          //                 hintText: "Write a comment",          //                 contentPadding:          //                 EdgeInsets.symmetric(horizontal: 15),          //                 hintStyle: g6S14w4,          //               ),          //             )),          //         _keyboardVisible ?          //         Align(          //             alignment: Alignment.bottomRight,          //             child: Padding(          //               padding: const EdgeInsets.symmetric(          //                   horizontal: 10, vertical: 5),          //               child: InkWell(          //                   onTap: () async{          //                     if(_controller.text.isEmpty){          //                       snackThis(          //                         context: context,          //                         content: const Text("Please enter comment"),          //                         color: Colors.red.shade700,          //                       );          //                     }          //                     else{          //                       print("else::::${_controller.text}");          //                       try{          //                         setState(() {          //                           isloading = true;          //                         });          //                         print("1111::::");          //                         String data = jsonEncode({          //                           "comment": _controller.text,          //                         });          //          //                         final res = await IssuesRepository().addComment(widget.args["id"].toString(), data);          //          //                         if(res == true){          //                           setState(() {          //                             isloading = false;          //                           });          //                           Navigator.pop(context);          //                           _controller.clear();          //                           snackThis(          //                               context: context,          //                               color: Colors.green,          //                               duration: 2,          //                               content: const Text('Comment Added Successfully'));          //                         }          //                         else {          //                           setState(() {          //                             isloading = false;          //                           });          //                           _controller.clear();          //                           snackThis(          //                               context: context,          //                               color: Colors.red,          //                               duration: 2,          //                               content: const Text('Error'));          //                         }          //                       }          //                       on Exception catch (e) {          //                         setState(() {          //                           isloading = false;          //                         });          //                         _controller.clear();          //                         snackThis(          //                             context: context,          //                             color: Colors.red,          //                             duration: 2,          //                             content: Text(e.toString()));          //                       }          //                     }          //          //                   },          //                   child: const Icon(Icons.send,          //                       color:  tabBlue)),          //             )) : Container(),          //       ],          //     )),        ),      );    });  }}