import 'dart:convert';import 'dart:developer';import 'dart:io';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_barcode_scanner/flutter_barcode_scanner.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:intl/intl.dart';import 'package:qr_code_scanner/qr_code_scanner.dart';import 'package:shared_preferences/shared_preferences.dart';import '../../../api/repositories/customer_issue_repo.dart';import '../../../config/hive_config.dart';import '../../../config/preference.config.dart';import '../../../constants/app_color.dart';import '../../../constants/app_image.dart';import '../../../constants/font_size.dart';import '../../../constants/route_name.dart';import '../../../model/response/user_response.dart';import '../../auth/login_screen.dart';import '../../widget/custom_app_bar.dart';class AccountScreen extends StatefulWidget {  AccountScreen({Key? key}) : super(key: key);  @override  State<AccountScreen> createState() => _AccountScreenState();}class _AccountScreenState extends State<AccountScreen> {  final List settings = [    {      "icon": Icons.contact_mail,      "name": "Emergency Visit",    },    {      "icon": Icons.qr_code_scanner,      "name": "Qr Code",    },    {      "icon": Icons.card_travel_outlined,      "name": "Issues",    },    {      "icon": Icons.settings,      "name": "Settings",    },  ];  String _scanBarcode = 'Unknown';  UserResponse? user;  final SharedPreferences localStorage = PreferenceUtils.instance;  final GlobalKey qrKey = GlobalKey(debugLabel: 'QR');  Barcode? result;  getUser() async {    SharedPreferences sharedPreferences =        await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('user');    Map<String, dynamic> userMap = json.decode(userData!);    UserResponse userD = UserResponse.fromJson(userMap);    setState(() {      user = userD;    });  }  logout() async {    HiveUtils.box.clear();    await localStorage.remove('user');    await localStorage.remove('token');    await localStorage.remove('refresh');  }  @override  void initState() {    getUser();    super.initState();  }  QRViewController? controller;  @override  Widget build(BuildContext context) {    Size size = MediaQuery.of(context).size;    return Scaffold(      appBar: appBar(        noBackButton: false,        navTitle: "Profile",      ),      body: getBody(size, context),    );  }  Widget getBody(size, context) {    return SingleChildScrollView(      child: Column(        children: [          const SizedBox(            height: 20,          ),          Center(            child: Column(              children: [                Stack(                  clipBehavior: Clip.none,                  children: [                    Container(                      height: 95,                      width: 95,                      decoration: BoxDecoration(                        borderRadius: BorderRadius.circular(15),                        image: const DecorationImage(                            image: AssetImage(kAccount),                            fit: BoxFit.cover),                      ),                    ),                    Positioned(                        bottom: -4,                        right: -4,                        child: Container(                          height: 26,                          width: 26,                          decoration: const BoxDecoration(                              shape: BoxShape.circle, color: black),                          child: const Icon(                            Icons.edit_outlined,                            color: white,                            size: 16,                          ),                        )),                  ],                ),                const SizedBox(                  height: 10,                ),                Text(                  user != null                      ? "${user!.firstName} ${user!.lastName}"                      : "N/A",                  style: TextStyle(                      fontSize: font_20, fontWeight: FontWeight.bold),                ),                const SizedBox(                  height: 3,                ),                Text(                  user != null ? user!.displayName.toString() : "N/A",                  style: const TextStyle(                      fontSize: font_12, color: grey_600),                ),                const SizedBox(                  height: 3,                ),                Text(                  user == null                      ? "N/A"                      : user!.isAdmin == true                          ? "Admin"                          : user!.isStaff == true                              ? "Staff"                              : "User",                  style: const TextStyle(                      fontSize: font_14, color: grey_600),                ),              ],            ),          ),          const SizedBox(            height: 40,          ),          Builder(builder: (context) {            return Column(children: [              user != null                  ? user!.isStaff == false                      ? ListTile(                          onTap: () {                            Navigator.of(context)                                .pushNamed(routeEmergencyVisit);                          },                          leading: Container(                            height: 45,                            width: 45,                            decoration: BoxDecoration(                                borderRadius:                                    BorderRadius.circular(10),                                color: white),                            child: const Icon(                              Icons.contact_mail,                              color: black,                            ),                          ),                          title: const Text(                            "Emergency visit",                            style: TextStyle(                                fontSize: font_16,                                fontWeight: FontWeight.bold),                          ),                        )                      : Container()                  : Container(),              user != null                  ? user!.isStaff == true                      ? ListTile(                          onTap: () {                            // Navigator.of(context)                            //     .pushNamed(routeQRScan);                            scanQR();                          },                          leading: Container(                            height: 45,                            width: 45,                            decoration: BoxDecoration(                                borderRadius:                                    BorderRadius.circular(10),                                color: white),                            child: const Icon(                              Icons.qr_code_scanner,                              color: black,                            ),                          ),                          title: const Text(                            "QR Scan",                            style: TextStyle(                                fontSize: font_16,                                fontWeight: FontWeight.bold),                          ),                        )                      : Container()                  : Container(),              user != null                  ? user!.isStaff == false                      ? ListTile(                          onTap: () {                            Navigator.of(context)                                .pushNamed(routeIssue);                          },                          leading: Container(                            height: 45,                            width: 45,                            decoration: BoxDecoration(                                borderRadius:                                    BorderRadius.circular(10),                                color: white),                            child: const Icon(                              Icons.contact_mail,                              color: black,                            ),                          ),                          title: Text(                            "Issues",                            style: const TextStyle(                                fontSize: font_16,                                fontWeight: FontWeight.bold),                          ),                        )                      : Container()                  : Container(),              ListTile(                onTap: () {                  logout();                  Navigator.pushReplacement(                      context,                      MaterialPageRoute(                          builder: (context) => LoginScreen()));                },                leading: Container(                  height: 45,                  width: 45,                  decoration: BoxDecoration(                      borderRadius:                      BorderRadius.circular(10),                      color: white),                  child: const Icon(                    Icons.logout,                    color: black,                  ),                ),                title: const Text(                  "Log out",                  style: TextStyle(                      fontSize: font_16,                      fontWeight: FontWeight.bold),                ),              )            ]);          }),        ],      ),    );  }  Future<void> scanQR() async {    String barcodeScanRes;    try {      barcodeScanRes = await FlutterBarcodeScanner.scanBarcode(          '#ff6666', 'Cancel', true, ScanMode.QR);      print("lol SACN VALUE::::" + barcodeScanRes);      try {        final res = await IssuesRepository().getQRScanDetails(barcodeScanRes);        if (res == true) {          Fluttertoast.showToast(msg: "Issue in progress", backgroundColor: Colors.red);        } else {          Fluttertoast.showToast(msg: "Error", backgroundColor: Colors.red);        }      } catch (e) {        Fluttertoast.showToast(msg: e.toString(), backgroundColor: Colors.red);      }    } on PlatformException {      barcodeScanRes = 'Failed to get platform version.';      if (!mounted) return;      setState(() {        _scanBarcode = barcodeScanRes;      });    }}}