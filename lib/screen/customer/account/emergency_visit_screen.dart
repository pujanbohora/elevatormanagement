import 'dart:convert';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:geolocator/geolocator.dart';import 'package:loader_overlay/loader_overlay.dart';import '../../../api/repositories/emergency_visit_repo.dart';import '../../../constants/app_color.dart';import '../../../constants/font_weight.dart';import '../../widget/custom_app_bar.dart';import '../../widget/snackbar.dart';class EmergencyVisitScreen extends StatefulWidget {  const EmergencyVisitScreen({Key? key}) : super(key: key);  @override  State<EmergencyVisitScreen> createState() =>      _EmergencyVisitScreenState();}class _EmergencyVisitScreenState extends State<EmergencyVisitScreen> {  TextEditingController _nameController = TextEditingController();  TextEditingController _descriptionController = TextEditingController();  String lat = "";  String long = "";  FocusNode nameFocusNode = FocusNode();  bool isloading = false;  Position? _currentPosition;  Future<bool> _handleLocationPermission() async {    bool serviceEnabled;    LocationPermission permission;    serviceEnabled = await Geolocator.isLocationServiceEnabled();    if (!serviceEnabled) {      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(          content: Text(              'Location services are disabled. Please enable the services')));      return false;    }    permission = await Geolocator.checkPermission();    if (permission == LocationPermission.denied) {      permission = await Geolocator.requestPermission();      if (permission == LocationPermission.denied) {        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(            content: Text('Location permissions are denied')));        return false;      }    }    if (permission == LocationPermission.deniedForever) {      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(          content: Text(              'Location permissions are permanently denied, we cannot request permissions.')));      return false;    }    return true;  }  Future<void> _getCurrentPosition() async {    final hasPermission = await _handleLocationPermission();    if (!hasPermission) return;    await Geolocator.getCurrentPosition(            desiredAccuracy: LocationAccuracy.high)        .then((Position position) {      setState(() => _currentPosition = position);    }).catchError((e) {      debugPrint(e);    });  }  @override  Widget build(BuildContext context) {    if (isloading == true) {      print("overlay shown");      context.loaderOverlay.show();    } else {      context.loaderOverlay.hide();    }    return Scaffold(        appBar: appBar(          appBarBackgroupColor: white,          noBackButton: true,          navTitle: "Emergency Visit",        ),        body: SafeArea(          child: Padding(            padding: const EdgeInsets.symmetric(horizontal: 20),            child: ListView(              shrinkWrap: true,              physics: const BouncingScrollPhysics(),              // padding: EdgeInsets.zero,              children: [                const Padding(                  padding: EdgeInsets.symmetric(vertical: 10),                  child: Text(                    " Enter Title *",                    style: TextStyle(fontWeight: kW6),                  ),                ),                TextFormField(                  controller: _nameController,                  keyboardType: TextInputType.visiblePassword,                  decoration: const InputDecoration(                    hintText: 'Enter Title',                    filled: true,                    enabledBorder: OutlineInputBorder(                        borderSide: BorderSide(color: kPrimaryColor)),                    focusedBorder: OutlineInputBorder(                        borderSide: BorderSide(color: Colors.green)),                  ),                ),                const SizedBox(                  height: 10,                ),                const Padding(                  padding: EdgeInsets.symmetric(vertical: 10),                  child: Text(                    " Description *",                    style: TextStyle(fontWeight: kW6),                  ),                ),                TextFormField(                  controller: _descriptionController,                  keyboardType: TextInputType.visiblePassword,                  maxLines: null,                  minLines: 10,                  decoration: const InputDecoration(                    hintText: "Enter Description",                    filled: true,                    enabledBorder: OutlineInputBorder(                        borderSide: BorderSide(color: kPrimaryColor)),                    focusedBorder: OutlineInputBorder(                        borderSide: BorderSide(color: Colors.green)),                  ),                ),                const SizedBox(                  height: 10,                ),                const Padding(                  padding: EdgeInsets.symmetric(vertical: 5),                  child: Text(                    " Longitude",                    style: TextStyle(fontWeight: kW6),                  ),                ),                Container(                  padding: const EdgeInsets.symmetric(                      vertical: 20, horizontal: 10),                  decoration: BoxDecoration(                      color: Colors.grey[200],                      borderRadius: BorderRadius.circular(4),                      border: Border.all(color: kPrimaryColor)),                  child: Text(                    _currentPosition?.latitude.toString() ?? "",                  ),                ),                const SizedBox(                  height: 10,                ),                const Padding(                  padding: EdgeInsets.symmetric(vertical: 5),                  child: Text(                    " Latitude",                    style: TextStyle(fontWeight: kW6),                  ),                ),                Container(                  padding: const EdgeInsets.symmetric(                      vertical: 20, horizontal: 10),                  decoration: BoxDecoration(                      color: Colors.grey[200],                      borderRadius: BorderRadius.circular(4),                      border: Border.all(color: kPrimaryColor)),                  child: Text(                    _currentPosition?.longitude.toString() ?? "",                  ),                ),                const SizedBox(                  height: 10,                ),                Row(                  children: [                    Container(                        child: ElevatedButton(                      onPressed: () {                        setState(() {                          isloading = true;                        });                        _getCurrentPosition();                        setState(() {                          isloading = false;                        });                      },                      child: const Text("Get Location"),                    )),                  ],                ),                const SizedBox(                  height: 30,                ),                SizedBox(                    height: 50,                    child: ElevatedButton(                      style: ButtonStyle(                          backgroundColor:                              MaterialStateProperty.all(lightTabBlue),                          shape: MaterialStateProperty.all<                                  RoundedRectangleBorder>(                              RoundedRectangleBorder(                            borderRadius: BorderRadius.circular(4.0),                          ))),                      onPressed: () async {                        if (_nameController.text.isEmpty) {                          Fluttertoast.showToast(                              msg: 'Please Enter Title');                        }                        // else                        if (_descriptionController.text.isEmpty) {                          Fluttertoast.showToast(                              msg: "Please Enter Description");                        } else {                          setState(() {                            isloading = true;                          });                          try {                            final datas = jsonEncode({                              "description":                                  _descriptionController.text,                                "title": _nameController.text,                              "latitude": double.parse((_currentPosition?.latitude)!.toStringAsFixed(2)),                              // _currentPosition?.latitude.toString(),                              "longitude": double.parse((_currentPosition?.longitude)!.toStringAsFixed(2))                              // _currentPosition?.longitude.toString(),                            });                            final res =                                await EmergencyVisitRepository()                                    .addEmergencyVisit(datas);                            setState(() {                              isloading = true;                            });                            if (res == true) {                              setState(() {                                isloading = false;                              });                              snackThis(                                  context: context,                                  color: Colors.green,                                  duration: 2,                                  content: const Text(                                      "Emergency Visit Added Successfully"));                              _nameController.clear();                              _descriptionController.clear();                              Navigator.pop(context);                            } else {                              setState(() {                                isloading = false;                              });                              snackThis(                                  context: context,                                  color: Colors.red,                                  duration: 2,                                  content: Text(                                      "Failed to Add Emergency Visit"                                          .toString()));                            }                          } catch (e) {                            setState(() {                              isloading = false;                            });                            snackThis(                                context: context,                                color: Colors.red,                                duration: 2,                                content: const Text(                                    "Failed to Add Emergency Visit"));                          }                        }                      },                      child: const Text("Submit",                          style:                              TextStyle(fontSize: 16, color: white)),                    )),              ],            ),          ),        ));  }}