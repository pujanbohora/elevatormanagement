import 'dart:convert';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:modal_bottom_sheet/modal_bottom_sheet.dart';import 'package:provider/provider.dart';import 'package:shared_preferences/shared_preferences.dart';import '../config/api_response.config.dart';import '../constants/app_color.dart';import '../constants/app_image.dart';import '../model/response/user_response.dart';import '../screen/auth/auth_view_model.dart';import '../screen/customer/account/account_screen.dart';import '../screen/customer/account/order_history_screen.dart';import '../screen/customer/dashboard/customer_dashboard_screen.dart';import '../screen/technician/technician_dashboard/technician_dashboard.dart';import '../screen/technician/technician_issues/technician_issues_screen.dart';import '../view_model/common_view_model.dart';class NavigationScreen extends StatefulWidget {  final data;  NavigationScreen({Key? key, required this.data, this.redirect, this.args}) : super(key: key);  String? redirect;  String? args;  @override  State<NavigationScreen> createState() => _NavigationScreenState();}class _NavigationScreenState extends State<NavigationScreen> {  String title = 'Home';  _onPageChanged(int index) {    // onTap    common.setNavigationIndex(index);    setState(() {      switch (index) {        case 0:          {            title = 'Home';          }          break;        case 1:          {            title = 'Order';          }          break;        case 2:          {            title = 'Account';          }          break;      }    });  }  late CommonViewModel common;  late AuthViewModel _provider2;  UserResponse? user;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      common = Provider.of<CommonViewModel>(context,listen: false);      _provider2 = Provider.of<AuthViewModel>(context,listen: false);      _provider2.fetchUser();    });    getUser();    super.initState();  }  getUser() async {    SharedPreferences sharedPreferences = await SharedPreferences.getInstance();    String? userData = sharedPreferences.getString('user');    Map<String, dynamic> userMap = json.decode(userData!);    UserResponse userD = UserResponse.fromJson(userMap);    setState(() {      user = userD;    });    // print("user type super user:::${user user!.isSuperuser}");  }  @override  void didChangeDependencies() {    super.didChangeDependencies();    WidgetsBinding.instance.addPostFrameCallback((_) {      common.setInitial(widget.data);    });  }  @override  Widget build(BuildContext context) {    return Consumer2<CommonViewModel, AuthViewModel>(        builder: (context, common, auth, child) {          return WillPopScope(            onWillPop: () {              if (common.navigationIndex == 0) {                showMaterialModalBottomSheet(                    context: context,                    shape: const RoundedRectangleBorder(                        borderRadius:                        BorderRadius.vertical(top: Radius.circular(10))),                    backgroundColor: white,                    builder: (context) {                      return Container(                        constraints: const BoxConstraints(maxHeight: 600),                        child: SingleChildScrollView(                          child: Container(                              padding: const EdgeInsets.symmetric(                                  vertical: 10, horizontal: 10),                              child: Column(                                crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  const Text(                                    "Do you want to quit the application?",                                    style: TextStyle(                                        fontSize: 16,                                        fontWeight: FontWeight.bold),                                  ),                                  const SizedBox(                                    height: 10,                                  ),                                  Row(                                    children: [                                      Expanded(                                        child: ElevatedButton(                                          style: ButtonStyle(                                            backgroundColor:                                            MaterialStateProperty.all<Color>(                                                white),                                            shape: MaterialStateProperty.all(                                              RoundedRectangleBorder(                                                  borderRadius:                                                  BorderRadius.circular(5)),                                            ),                                          ),                                          onPressed: () {                                            Navigator.of(context).pop();                                          },                                          child: const Text("Cancel", style: TextStyle(color: black),),                                        ),                                      ),                                      const SizedBox(                                        width: 10,                                      ),                                      Expanded(                                        child: ElevatedButton(                                          style: ButtonStyle(                                            backgroundColor:                                            MaterialStateProperty.all<Color>(                                                kPrimaryColor),                                            shape: MaterialStateProperty.all(                                              RoundedRectangleBorder(                                                  borderRadius:                                                  BorderRadius.circular(5)),                                            ),                                          ),                                          onPressed: () {                                            SystemNavigator.pop();                                          },                                          child: const Text("Quit"),                                        ),                                      ),                                    ],                                  )                                ],                              )),                        ),                      );                    });              } else {                common.itemTapped(0);              }              return Future.value(false);            },            child: Scaffold(              body: isLoading(auth.userApiResponse) ? Center(child: CircularProgressIndicator()) : Builder(                builder: (context) {                  print("USERERRRR:::::");                  print("USER ROLE::::${user !=null ? user!.isStaff : null}");                  return PageView(                    controller: common.pagecontroller,                    onPageChanged: _onPageChanged,                    physics: const NeverScrollableScrollPhysics(),                    children: <Widget>[                     auth.user.isStaff ==true ?  TechnicianDashboard() : CustomerDashboardScreen(),                      auth.user.isStaff ==true ?  TechnicianIssuesScreen() : OrderHistoryScreen(),                      AccountScreen()                      // CustomerDashboardScreen(),//                   // TechnicianDashboard(),//                   OrderScreen(),//                   // TechnicianIssuesScreen(),//                   AccountScreen(),                    ],                  );                }              ),              bottomNavigationBar: Theme(                data: ThemeData(                  // splashColor: Colors.transparent,                  // highlightColor: Colors.transparent,                ),                child: BottomAppBar(                  shape: const CircularNotchedRectangle(),                  notchMargin: 10,                  clipBehavior: Clip.antiAlias,                  child: BottomNavigationBar(                    backgroundColor: white,                    onTap: common.itemTapped,                    elevation: 0,                    selectedItemColor: black,                    unselectedItemColor: black,                    currentIndex: common.navigationIndex,                    selectedLabelStyle: const TextStyle(color: black),                    unselectedLabelStyle: const TextStyle(color: black),                    type: BottomNavigationBarType.fixed,                    items: [                      BottomNavigationBarItem(                          icon: Image.asset(                              common.navigationIndex == 0 ? kHomeOutline : kHome,                            height: 30,                            width: 30,                            color: common.navigationIndex == 0 ? kPrimaryColor : grey_600,                          ),                          // ignore: deprecated_member_use                          label:'Home'                      ),                      BottomNavigationBarItem(                          icon: Image.asset(                            common.navigationIndex == 1 ? kOrderOutline : kOrder ,                            height: 30,                            width: 30,                            color: common.navigationIndex == 1 ? kPrimaryColor : grey_600,                          ),                          label: auth.user.isStaff ==true ? "Issue" : "Order"                      ),                      BottomNavigationBarItem(                          icon:                          Image.asset(                            common.navigationIndex == 2 ?  kAccountOutline: kUser,                            height: 30,                            width: 30,                            color: common.navigationIndex == 2 ? kPrimaryColor : grey_600,                          ),                          label: "Account"                      ),                    ],                  ),                ),              ),            ),          );        });  }}