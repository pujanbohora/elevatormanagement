import 'dart:async';import 'dart:convert';import 'package:flutter/material.dart';import 'package:lottie/lottie.dart';import 'package:provider/provider.dart';import 'package:shared_preferences/shared_preferences.dart';import '../api/repositories/user_repository.dart';import '../components/internet_check.dart';import '../config/preference.config.dart';import '../constants/app_color.dart';import '../constants/app_image.dart';import '../constants/route_name.dart';import '../model/request/login_request.dart';import '../model/response/user_response.dart';import '../screen/auth/auth_view_model.dart';import '../screen/widget/snackbar.dart';import '../services/login_service.dart';import '../view_model/common_view_model.dart';class SplashScreen extends StatefulWidget {  const SplashScreen({Key? key}) : super(key: key);  @override  State<SplashScreen> createState() => _SplashScreenState();}class _SplashScreenState extends State<SplashScreen> {  late AuthViewModel _provider;  final SharedPreferences localStorage = PreferenceUtils.instance;  late CommonViewModel commonViewModel;  @override  void initState() {    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {      commonViewModel = Provider.of<CommonViewModel>(context, listen: false);    });    _checkLogin();    super.initState();  }  Future<void> _checkLogin() async {    Timer(const Duration(seconds: 2), () async {      if (localStorage.getString('token') != null) {        await internetCheck().then((value) async {          if (value) {            String? username = localStorage.getString('username');            String? password = localStorage.getString('password');            final request = LoginRequest(                email: username.toString(),                password: password.toString());            try {              final result = await LoginService().login(                  request, username.toString(), password.toString());              if (result == true) {                UserResponse res = await UserRepository().getUser();                if(res.success == true){                  if( res.isAdmin == true){                    Navigator.pushNamed(context, routeAdmin);                  }                  else{                    Navigator.pop(context);                    commonViewModel.setNavigationIndex(0);                    print("logged in using internet");                    Navigator.of(context).pushNamed(routeNavigation);                  }                }              }              else {                snackThis(                  context: context,                  content: const Text(                      "please check credentials and try again"),                  color: Colors.red.shade700,                );                Navigator.of(context).pushNamed(routeLogin);              }            } catch (e) {              print("CATCH " + e.toString());              Navigator.of(context).pushNamed(routeLogin);              snackThis(                context: context,                content: Text(e.toString()),                color: Colors.red.shade700,              );            }          }          else {            try {              // if (_user.type == "Student") {              Navigator.pop(context);              print("logged in no internet token");              Navigator.of(context).pushNamed(routeNavigation);              // }            } catch (e) {              print("CATCH " + e.toString());              Navigator.of(context).pushNamed(routeLogin);              snackThis(                context: context,                content: Text(e.toString()),                color: Colors.red.shade700,              );            }          }        });      } else {        Navigator.pushReplacementNamed(context, routeLogin);      }    });  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: white,      body: Stack(        children: [          Center(              child: SizedBox(                  height: 400,width: 500, child: Image.asset(appLogo))),          Align(              alignment: Alignment.bottomCenter,              child: Padding(                  padding: const EdgeInsets.only(top: 100.0),                  child: Lottie.asset(kLottieLoading,height: 50,width: 50)              )),        ],      ),    );  }}