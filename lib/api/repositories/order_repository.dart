import '../../model/response/user_order_response.dart';import '../api.dart';import '../endpoints.dart';//// class OrderRepository {//   API api = API();//   Future<UserOrderResponse> getUserOrderLessons() async {//     API api = new API();////     dynamic response;//     UserOrderResponse res;//     try {//       response = await api.getWithToken(Endpoints.userOrder);////       res = UserOrderResponse.fromJson(response);//       // await box.put('${Endpoints.journeyLessons+titleSlug}/weekly/public', res.toJson());//     } catch (e) {//       // response = await box.get('${Endpoints.journeyLessons+titleSlug}/weekly/public');//       res = UserOrderResponse.fromJson(response);//     }//     return res;//   }////// }import 'dart:convert';import 'package:shared_preferences/shared_preferences.dart';import '../../../api/api.dart';import '../../../api/endpoints.dart';import '../../../config/preference.config.dart';import 'package:http/http.dart' as http;class OrderRepository {  API api = API();  final SharedPreferences localStorage = PreferenceUtils.instance;  Future<dynamic> getAllOrder() async {    var client = http.Client();    var orderModel;    final SharedPreferences sharedPreferences = await SharedPreferences.getInstance();    String? token = sharedPreferences.getString("token");    print("[POST]:::${domain+Endpoints.userOrder}");    try {      var response = await client.get(        Uri.parse(domain+Endpoints.userOrder),        headers: {          'Authorization': 'Bearer $token',          'Content-Type': 'application/json; charset=utf-8',        },      );      print("STATUS CODE::::${response.statusCode}");      if (response.statusCode == 200) {        var jsonMap = jsonDecode(response.body);        print("RESPONSE:::::${response.body}");        orderModel = jsonMap;      }    } catch (e) {      print("RESPOSE ERR :: " + e.toString());      return orderModel;    }    return orderModel;  }}